{"version":3,"sources":["ApplicationBar.js","data.tsv.js","Data.context.js","Stage.js","Stages.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","logo","height","paddingRight","_ref","classes","react_default","a","createElement","className","index_es","position","variant","src","alt","color","data","DataContext","React","createContext","DataContextProvider","children","_useState","useState","_useState2","Object","slicedToArray","setData","_useState3","_useState4","activeStage","setActiveStage","value","loadData","_data","tsv","split","map","row","getStageLabel","_ref3","stageIndex","getStageContent","_ref4","stageNext","prevActiveStage","stageBack","stageReset","getSectionTitle","_ref2","sectionIndex","Provider","Stage","props","objectWithoutProperties","_useContext","useContext","label","content","slice","section","sectionTitle","gutterBottom","assign","onClick","Stages","length","stages","stageData","index","src_Stage","key","activeStep","orientation","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","typography","useNextVariants","App","styles","src_ApplicationBar","src_Stages","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2ac1b0b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst ApplicationBar = ({\n  classes,\n}) => {\n  const title = 'Translation Process'\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <img className={classes.logo} src=\"./logo.png\" alt=\"unfoldingWord\" />\n          <Typography variant=\"h6\" color=\"inherit\">\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nApplicationBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  logo: {\n    height: '1.8em',\n    paddingRight: '0.5em',\n  },\n};\n\nexport default withStyles(styles)(ApplicationBar);\n","\nconst data = \n`Stages\tParticipants\tTechnology Platform\tResources to translate into the GL\tPractical Steps\nTraining GL leaders\tGL network leaders, uW GL Coordinator, uW trainers\tBible Content Viewer, tS, tM, DCS, Crowdin, tC, MD Editor\ttA, OBS, ULT, UST, tW, tN, tQ, UGL, UHAL, UGG, UHG, tS & tC interfaces\t1. translation principles 2. GL strategy 3. GL resources 4. project management 5. Choosing translators (tA) 6. use of tech platforms and purpose of each\nTraining GL Translators\t3-20 MTTs, chosen by GL leaders acc. to GL Manual, uW trainers\tBible Content Viewer, tS, DCS, Markdown Editor, tC, Crowdin\ttA, OBS, ULT, UST, tW, tN, tQ, UGL, UHAL, UGG, UHG, tS & tC interfaces\t1. translation principles 2. GL strategy 3. GL resources 4. use of tech platforms and purpose of each\nDrafting GL Resources\tGL leaders, MTTs, uW trainers\ttS, DCS, Markdown Editor, Notes Editor\torder of: tA, OBS, followed by order in GL Manual for the rest\tMTTs: 1. Train MTTs in GL Manual 2. Follow specific guidelines in GL Manual for each resource 3. Review by other GL MTT 4. Review by GL team 5. Prepare ULT and UST drafts for loading into tC\ntW & tN checks\tGL leaders, MTTS, uW trainers\ttC, DCS\tOBS, ULT, UST\t1. train leaders and MTTs in tC 2. MTTs go through tW & tN checks 3. leaders review checks 4. make changes\nAccuracy Checking\tPastors (scholars), MTTs, uW trainers\ttS, Markdown Editor, Notes Editor, tC?, DCS\ttA, OBS, ULT, UST, tW, tN, tQ, UGL, UHAL, UGG, UHG\t1. train pastors or scholars in transl. principles, accuracy checking, GL guidelines 2. GL pastors or scholars check resource for accuracy to source & GL guidelines 3. GL translators incorporate feedback in draft\nValidation Check/Alignment\tGL network leaders or scholars or consultants, GL translators, uW trainers\ttC, DCS\ttA, OBS, ULT, UST, tW, tN, tQ, UGL, UHAL, UGG, UHG\t1. train church network delegates (CNDs) in transl. principles, tC, GL guidelines 2.a. CNDs check for accuracy with tC alignment tool as they align the GL ULT and UST 2.b. CNDs check other resources for accuracy to source & GL guidelines\nPost-translation\teditors, formatters, publishers, distributors\ttC, DCS, publisher\ttA, OBS, ULT, UST, tW, tN, tQ, UGL, UHAL, UGG, UHG\t1. spell check 2. format check of text 3. file structure check 4. publish 5. print 6. collect feedback 7. repeat as necessary`\n\nexport default data;\n","import React, {useState} from 'react';\n\nimport tsv from './data.tsv.js';\n\nexport const DataContext = React.createContext();\n\nexport function DataContextProvider({children}) {\n  const [data, setData] = useState([]);\n  const [activeStage, setActiveStage] = useState(0);\n\n  const loadData = () => {\n    const _data = tsv.split('\\n').map(row => row.split('\\t'));\n    setData(_data);\n  };\n\n  const getSectionTitle = ({sectionIndex}) => {\n    return data[0][sectionIndex];\n  };\n\n  const getStageLabel = ({stageIndex}) => {\n    return data[stageIndex][0];\n  };\n\n  const getStageContent = ({stageIndex}) => {\n    return data[stageIndex];\n  };\n\n  const stageNext = () => {\n    setActiveStage(prevActiveStage => prevActiveStage + 1);\n  };\n\n  const stageBack = () => {\n    setActiveStage(prevActiveStage => prevActiveStage - 1);\n  };\n\n  const stageReset = () => {\n    setActiveStage(0);\n  };\n\n  const value = {\n    data,\n    loadData,\n    getStageLabel,\n    getStageContent,\n    activeStage,\n    setActiveStage,\n    stageNext,\n    stageBack,\n    stageReset,\n    getSectionTitle,\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n","import React, {useContext} from 'react';\nimport {\n  Step,\n  StepLabel,\n  StepContent,\n  Typography,\n} from '@material-ui/core';\n\nimport {DataContext} from './Data.context';\n\nfunction Stage({\n  stageIndex,\n  ...props\n}) {\n  const {\n    activeStage,\n    setActiveStage,\n    getStageLabel,\n    getStageContent,\n    getSectionTitle,\n  } = useContext(DataContext);\n  const label = getStageLabel({stageIndex: stageIndex + 1});\n  const contentData = getStageContent({stageIndex: stageIndex + 1});\n  const content = contentData.slice(1).map((section, sectionIndex) => {\n    const sectionTitle = getSectionTitle({sectionIndex: sectionIndex + 1});\n    return (\n      <div>\n        <Typography variant='h6'>{sectionTitle}</Typography>\n        <Typography gutterBottom>\n          {section}\n        </Typography>\n      </div>\n    );\n  });\n\n  return (\n    <Step {...props} onClick={()=>setActiveStage(stageIndex)}>\n      <StepLabel>\n        {label}\n      </StepLabel>\n      <StepContent>\n        <Typography>{content}</Typography>\n      </StepContent>\n    </Step>\n  );\n};\n\nexport default Stage;\n","import React, {useContext} from 'react';\nimport {\n  Stepper,\n} from '@material-ui/core';\n\nimport Stage from './Stage';\n\nimport {DataContext} from './Data.context';\n\nfunction Stages() {\n  const {data, loadData, activeStage} = useContext(DataContext);\n  if (data.length === 0) loadData();\n\n  const stages = data.slice(1).map((stageData, index) =>\n    <Stage key={index} stageIndex={index} />\n  );\n\n  return (\n    <Stepper activeStep={activeStage} orientation=\"vertical\">\n      {stages}\n    </Stepper>\n  );\n};\n\nexport default Stages;\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport './App.css';\n\nimport ApplicationBar from './ApplicationBar';\nimport Stages from './Stages'\n\nimport {DataContextProvider} from './Data.context';\n\nfunction App() {\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <DataContextProvider>\n        <ApplicationBar />\n        <Stages />\n      </DataContextProvider>\n    </MuiThemeProvider>\n  );\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#59B7E7',\n      main: '#31ADE3',\n      dark: '#014263',\n      contrastText: '#FFF'\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}